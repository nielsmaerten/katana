---
- name: Set up Restic backup for PBS datastore to S3
  hosts: katana
  become: yes
  vars:
    restic_repository: "{{ lookup('env', 'RESTIC_REPOSITORY') }}"
    aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    restic_password: "{{ lookup('env', 'RESTIC_PASSWORD') }}"
    aws_default_region: "{{ lookup('env', 'AWS_DEFAULT_REGION') | default('us-east-1') }}"
    backup_source: "/tank/pbs-datastore"
    
  tasks:
    - name: Validate required environment variables
      fail:
        msg: |
          Required environment variable {{ item }} is not set.
          
          Please check the .env.example file in this directory for configuration examples.
          Copy it to .env, fill in your values, then run:
          source .env
          
          Before running this playbook again.
      when: vars[item] == ""
      loop:
        - restic_repository
        - aws_access_key_id
        - aws_secret_access_key
        - restic_password

    - name: Install Restic
      package:
        name: restic
        state: present

    - name: Create restic configuration directory
      file:
        path: /etc/restic
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Create restic environment file
      copy:
        content: |
          RESTIC_REPOSITORY={{ restic_repository }}
          AWS_ACCESS_KEY_ID={{ aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }}
          RESTIC_PASSWORD={{ restic_password }}
          AWS_DEFAULT_REGION={{ aws_default_region }}
        dest: /etc/restic/env
        mode: '0600'
        owner: root
        group: root

    - name: Check if restic repository exists
      shell: |
        source /etc/restic/env
        restic snapshots
      register: restic_check
      failed_when: false
      changed_when: false

    - name: Initialize restic repository if it doesn't exist
      shell: |
        source /etc/restic/env
        restic init
      when: restic_check.rc != 0

    - name: Create daily restic backup script
      template:
        src: 432-restic-backup.sh.j2
        dest: /etc/cron.daily/restic-backup
        mode: '0755'
        owner: root
        group: root

    - name: Create weekly restic cleanup script
      template:
        src: 432-restic-cleanup.sh.j2
        dest: /etc/cron.weekly/restic-cleanup
        mode: '0755'
        owner: root
        group: root

    - name: Verify backup source exists
      stat:
        path: "{{ backup_source }}"
      register: backup_source_stat
      failed_when: not backup_source_stat.stat.exists

    - name: Display setup completion message
      debug:
        msg: |
          Restic backup setup completed successfully!
          
          Daily backups will run via /etc/cron.daily/restic-backup
          Weekly cleanup will run via /etc/cron.weekly/restic-cleanup
          
          To run a backup manually: /etc/cron.daily/restic-backup
          To check backup logs: journalctl -t restic-backup
          To list snapshots: source /etc/restic/env && restic snapshots
